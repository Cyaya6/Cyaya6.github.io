<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试</title>
      <link href="/2023/04/08/%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/04/08/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="c-学习"><a href="#c-学习" class="headerlink" title="c++学习"></a>c++学习</h1><h2 id="code7-类和对象"><a href="#code7-类和对象" class="headerlink" title="code7 类和对象"></a>code7 类和对象</h2><blockquote><p>c++面向对象的三大特性是 <code>封装 继承  多态</code></p></blockquote><p>c++认为万事万物皆为对象，对象有属性和行为</p><p>比如：<br>人可以作为对象 ，属性有姓名，年龄，身高，体重等，行为有走路，跑步，吃饭，唱歌</p><p>具有相同性质的对象我们可以h抽象为类，人属于人类，车属于车类。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++学习</title>
      <link href="/2023/04/08/c++%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/04/08/c++%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="c-学习"><a href="#c-学习" class="headerlink" title="c++学习"></a>c++学习</h1><h2 id="code7-类和对象"><a href="#code7-类和对象" class="headerlink" title="code7 类和对象"></a>code7 类和对象</h2><blockquote><p>c++面向对象的三大特性是 <code>封装 继承  多态</code></p></blockquote><p>c++认为万事万物皆为对象，对象有属性和行为</p><p>比如：<br>人可以作为对象 ，属性有姓名，年龄，身高，体重等，行为有走路，跑步，吃饭，唱歌</p><p>具有相同性质的对象我们可以h抽象为类，人属于人类，车属于车类。</p><h3 id="code7-1-封装的意义"><a href="#code7-1-封装的意义" class="headerlink" title="code7-1 封装的意义"></a>code7-1 封装的意义</h3><p>封装的意义</p><blockquote><p>封装是c++面向对象的三大特性之一</p></blockquote><h4 id="1-将属性和行为作为一个整体，表现为生活中的事物"><a href="#1-将属性和行为作为一个整体，表现为生活中的事物" class="headerlink" title="1. 将属性和行为作为一个整体，表现为生活中的事物"></a>1. 将属性和行为作为一个整体，表现为生活中的事物</h4><p>语法 ： class 类名 {访问权限 ： 属性 &#x2F;行为}；</p><p>实例1：设计一个圆类，求圆的周长</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// c++面向对象的三大特性是 封装 继承  多态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 封装的意义 将属性和行为作为一个整体，表现为生活中的事物</span></span><br><span class="line"><span class="comment">// class 代表一个类  class 类名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/* data */</span></span><br><span class="line"><span class="keyword">public</span>: <span class="comment">// 访问权限  公共权限</span></span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="type">int</span> m_r; <span class="comment">// 半径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 行为</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">calculateZC</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * PI * m_r; <span class="comment">// 求圆的周长</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建对象</span></span><br><span class="line">    Circle c; <span class="comment">// c就是一个具体的圆</span></span><br><span class="line">    c.m_r = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;圆的周长为：&quot;</span> &lt;&lt; c.<span class="built_in">calculateZC</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-将属性和行为加以权限控制"><a href="#2-将属性和行为加以权限控制" class="headerlink" title="2. 将属性和行为加以权限控制"></a>2. 将属性和行为加以权限控制</h4><p>访问的权限有三种</p><ul><li><ol><li>public  公共权限</li></ol></li><li><ol start="2"><li>protected 保护权限</li></ol></li><li><ol start="3"><li>private 私有权限</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 三种权限</span><br><span class="line">// public  类内可以访问  类外可以访问</span><br><span class="line">// protected 类内可以访问 类外不可以访问</span><br><span class="line">// private 类内可以访问  类外不可以访问</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 将属性和行为加以权限控制</span></span><br><span class="line"><span class="comment">// 三种权限</span></span><br><span class="line"><span class="comment">// public   类内可以访问  类外可以访问</span></span><br><span class="line"><span class="comment">// protected 类内可以访问 类外不可以访问</span></span><br><span class="line"><span class="comment">// private 类内可以访问  类外不可以访问</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string m_name; <span class="comment">// 姓名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string m_car; <span class="comment">// 汽车</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_password; <span class="comment">// 密码</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> <span class="comment">// 三种权限在类内都可以访问</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_name = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">        m_car = <span class="string">&quot;奔驰&quot;</span>;</span><br><span class="line">        m_password = <span class="number">123456</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot; car: &quot;</span> &lt;&lt; m_car &lt;&lt; <span class="string">&quot; password: &quot;</span> &lt;&lt; m_password &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2.权限控制</span></span><br><span class="line">    Person p;</span><br><span class="line">    p.<span class="built_in">func</span>();</span><br><span class="line">    p.m_name = <span class="string">&quot;hhh&quot;</span>; <span class="comment">// 类外也可以访问</span></span><br><span class="line">    <span class="comment">// p.m_car = &quot;fll&quot;; protected 类外不可以访问</span></span><br><span class="line">    <span class="comment">// p.m_password = 456; private 类外不可以访问</span></span><br><span class="line">    p.<span class="built_in">show</span>();</span><br></pre></td></tr></table></figure><h4 id="3-struct-和-class的区别"><a href="#3-struct-和-class的区别" class="headerlink" title="3. struct 和 class的区别"></a>3. struct 和 class的区别</h4><p>在c++中stuct和classi唯一的区别就是默认的访问权限不同</p><p>区别：</p><ul><li>struct默认权限为public</li><li>class默认权限为private</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.struct和class的区别</span></span><br><span class="line"><span class="comment">// 唯一的区别就是在于默认的访问权限不同</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">class_a</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> m_A; <span class="comment">// 默认是私有权限</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">struct_a</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> m_A; <span class="comment">// 默认是公共权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// struct和class的区别</span></span><br><span class="line">    class_a c1;</span><br><span class="line">    <span class="comment">// c1.m_A = 10;  类默认是私有权限</span></span><br><span class="line">    struct_a s1;</span><br><span class="line">    s1.m_A = <span class="number">10</span>; <span class="comment">// 访问权限是公共权限</span></span><br></pre></td></tr></table></figure><h4 id="4-成员属性设置为私有"><a href="#4-成员属性设置为私有" class="headerlink" title="4. 成员属性设置为私有"></a>4. 成员属性设置为私有</h4><p>好处</p><ul><li><ol><li>将所有成员属性设置为私有，可以自己控制读写权限</li></ol></li><li><ol start="2"><li>对于写权限，我们可以检测数据的有效性</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 4. 成员属性设置为私有</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_Name;  <span class="comment">// 可读可写 姓名</span></span><br><span class="line">    <span class="type">int</span> m_Age;      <span class="comment">// 可读可写 年龄</span></span><br><span class="line">    string m_Lover; <span class="comment">// 只写 爱人</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 姓名 可读可写</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_Name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_Name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 年龄  可读可写</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAge</span><span class="params">(<span class="type">int</span> age)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt; <span class="number">150</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入年龄不正确！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getAge</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_Age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 爱人 只读</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setLover</span><span class="params">(string Lover)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_Lover = Lover;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 4.成员属性设置为私有</span></span><br><span class="line">    People p1;</span><br><span class="line">    p1.<span class="built_in">setName</span>(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Name: &quot;</span> &lt;&lt; p1.<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    p1.<span class="built_in">setAge</span>(<span class="number">26</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Age: &quot;</span> &lt;&lt; p1.<span class="built_in">getAge</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    p1.<span class="built_in">setLover</span>(<span class="string">&quot;hhh&quot;</span>);</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;Lover: &quot; &lt;&lt; p1.m_Lover &lt;&lt; endl;  私有权限 类外不可访问</span></span><br></pre></td></tr></table></figure><h3 id="code7-2-对象的初始化和清理"><a href="#code7-2-对象的初始化和清理" class="headerlink" title="code7-2 对象的初始化和清理"></a>code7-2 对象的初始化和清理</h3><p>c++中的面向对象来源于生活，每个对象也会有初始设置以及对象销毁前的清理数据的设置</p><h4 id="1-构造函数和析构函数"><a href="#1-构造函数和析构函数" class="headerlink" title="1. 构造函数和析构函数"></a>1. 构造函数和析构函数</h4><p>对象的初始化和清理是两个非常重要的问题</p><p>一个对象或者变量没有初始状态，对其使用后果未知</p><p>同样的使用完一个对象或者变量，没有及时清理，也会造成一定的安全问题</p><p>c++利用了构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，完成对象的初始化和清理工作</p><p>对象的初始化和清理工作是编译器强制要求我们要做的事情 ，如果我们自己不写，编译器会提供</p><p>编译器提供的构造函数和析构函数是空实现</p><ul><li>构造函数： 主要用于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无需手动调用</li><li>析构函数：主要用于对象销毁前系统自动调用，g执行一些清理工作</li></ul><p>构造函数的语法：</p><blockquote><p>类名 （） {}</p></blockquote><ol><li>构造函数，没有返回值也不写void</li><li>构造函数与类名相同</li><li>构造函数可以有参数，因此可以发生重载</li><li>程序在调用对象时会自动调用构造函数，无需手动调用，且只会调用一次</li></ol><p>析构函数的语法</p><blockquote><p>~类名 （）{}</p></blockquote><ol><li>析构函数，没有返回值也不写void</li><li>函数名称和类名相同，在类名前加上～</li><li>构造函数不可以有参数，因此不可以重载</li><li>程序在对象销毁前会自动调用析构，无需手动调用，且只会调用一次</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person析构函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person P;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-构造函数的分类"><a href="#2-构造函数的分类" class="headerlink" title="2. 构造函数的分类"></a>2. 构造函数的分类</h4><p>按参数类型分为</p><ul><li>有参构造</li><li>无参构造</li></ul><p>按类型分为</p><ul><li>普通构造</li><li>拷贝构造</li></ul><p>构造函数的三种调用方式</p><ul><li>括号法</li><li>显式法</li><li>隐式转换法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>() <span class="comment">// 无参构造</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person无参构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a) <span class="comment">// 有参构造</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person有参构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p) <span class="comment">// 拷贝构造</span></span><br><span class="line">    &#123;</span><br><span class="line">        age = p.age;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person拷贝构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person析构函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span> <span class="comment">// 调用无参构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span> <span class="comment">// 调用有参构造</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 1.括号法 常用</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">// 有参</span></span><br><span class="line">    <span class="comment">// 调用无参构造函数不能加括号 加了括号的话编译器会认为这是一个函数的声明</span></span><br><span class="line">    <span class="comment">// Person p2();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.显式法</span></span><br><span class="line">    Person p2 = <span class="built_in">Person</span>(<span class="number">10</span>); <span class="comment">// 有参构造</span></span><br><span class="line">    Person p3 = <span class="built_in">Person</span>(p2); <span class="comment">// 拷贝构造</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.隐式转换法</span></span><br><span class="line">    Person p4 = <span class="number">10</span>; <span class="comment">// Person p4 = Person(10);</span></span><br><span class="line">    Person p5 = p4; <span class="comment">// Person p5 = Person(p4);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Person p5(p4);</span></span><br><span class="line">    <span class="comment">// 不可以使用拷贝构造函数 初始化匿名对象 编译器会认为是对象声明</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;---------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="code7-3-拷贝构造函数"><a href="#code7-3-拷贝构造函数" class="headerlink" title="code7-3 拷贝构造函数"></a>code7-3 拷贝构造函数</h3><h4 id="1-拷贝构造函数的调用时机"><a href="#1-拷贝构造函数的调用时机" class="headerlink" title="1. 拷贝构造函数的调用时机"></a>1. 拷贝构造函数的调用时机</h4><p>c++中拷贝构造函数调用时机通常有三种情况</p><ul><li>使用一个已经创建完毕的对象来初始化一个对象</li><li>值传递的方式给函数参数传值</li><li>以值传递返回局部对象</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>() <span class="comment">// 无参构造</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person无参构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a) <span class="comment">// 有参构造</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person有参构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p) <span class="comment">// 拷贝构造</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person拷贝构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        age = p.age;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>() <span class="comment">// 析构函数在释放内存之前调用</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person析构函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 使用一个已经创建完毕的对象来初始化一个对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Person m1 = Person(10);</span></span><br><span class="line">    <span class="comment">// Person m = Person(m1);</span></span><br><span class="line">    <span class="function">Person <span class="title">man</span><span class="params">(<span class="number">100</span>)</span></span>;      <span class="comment">// 有参 man对象</span></span><br><span class="line">    <span class="function">Person <span class="title">newman</span><span class="params">(man)</span></span>;   <span class="comment">// 拷贝 newman对象</span></span><br><span class="line">    Person newman2 = man; <span class="comment">// 拷贝 newman2对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Person newman3;</span></span><br><span class="line">    <span class="comment">// newman3 = man;  这种不是拷贝构造函数 这是赋值操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 值传递的方式给函数参数传值 相当于 Person p1=p;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(Person p)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;---------------------&quot; &lt;&lt; endl;</span></span><br><span class="line">    Person p; <span class="comment">// 无参</span></span><br><span class="line">    <span class="built_in">work</span>(p);  <span class="comment">// 拷贝构造</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 以值传递返回局部对象</span></span><br><span class="line"><span class="function">Person <span class="title">doWork</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    cout &lt;&lt; (<span class="type">int</span> *)&amp;p1 &lt;&lt; endl; <span class="comment">// 0x7ffdab0e48c0</span></span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p = <span class="built_in">doWork</span>();       <span class="comment">// Person p = Person p1;</span></span><br><span class="line">    cout &lt;&lt; (<span class="type">int</span> *)&amp;p &lt;&lt; endl; <span class="comment">// 0x7ffdab0e48c0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;---------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;---------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">test3</span>();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Person无参构造函数的调用</span></span><br><span class="line"><span class="comment">    0x7fff8b199210</span></span><br><span class="line"><span class="comment">    0x7fff8b199210</span></span><br><span class="line"><span class="comment">    Person析构函数的调用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="code7-4-构造函数的调用规则"><a href="#code7-4-构造函数的调用规则" class="headerlink" title="code7-4 构造函数的调用规则"></a>code7-4 构造函数的调用规则</h3><p>默认情况下，c++编译器至少给一个类添加3个h汗素</p><ol><li>默认构造函数（无参 函数体为空）</li><li>默认析构函数（无参 函数体为空）</li><li>默认拷贝函数，对属性进行值拷贝</li></ol><p>构造函数的调用规则如下</p><ul><li>&#x3D;&#x3D; 如果用户定义有参构造函数 &#x3D;&#x3D;，<strong>c++不再提供默认无参构造，但是会提供默认拷贝构造</strong></li><li>&#x3D;&#x3D; 如果用户定义拷贝构造函数 &#x3D;&#x3D;，<strong>c++不会提供其他构造函数</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>() <span class="comment">// 无参构造</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person无参构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a) <span class="comment">// 有参构造</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person有参构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p) <span class="comment">// 拷贝构造</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person拷贝构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        age = p.age;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>() <span class="comment">// 析构函数在释放内存之前调用</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person析构函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">20</span>)</span></span>; <span class="comment">// 如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span></span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2的年龄为：&quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果用户提供有参构造 编译器不会提供默认构造 会提供拷贝构造</span></span><br><span class="line">    Person p1; <span class="comment">// 此时如果用户自己没有提供默认构造 会出错</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果用户自己提供的有参</span></span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(p2)</span></span>; <span class="comment">// 此时如果用户没有提供拷贝构造编译器会提供</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果用户提供拷贝构造，编译器不会提供其他构造函数</span></span><br><span class="line">    Person p4;     <span class="comment">// 如果用户没有提供默认构造，将会出错</span></span><br><span class="line">    <span class="function">Person <span class="title">p5</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">// 如果用户自己没有提供有参，会出错</span></span><br><span class="line">    <span class="function">Person <span class="title">p6</span><span class="params">(p5)</span></span>; <span class="comment">// 用户自己提供拷贝构造</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// test1();</span></span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="code7-5-深拷贝与浅拷贝"><a href="#code7-5-深拷贝与浅拷贝" class="headerlink" title="code7-5 深拷贝与浅拷贝"></a>code7-5 深拷贝与浅拷贝</h3><p>深拷贝和浅拷贝 面试常考</p><h1 id="一个拷贝构造函数可以有深拷贝和浅拷贝-lt-lt-lt-lt-lt-lt-lt-HEAD浅拷贝是简单的赋值操作-深拷贝是堆区拷贝"><a href="#一个拷贝构造函数可以有深拷贝和浅拷贝-lt-lt-lt-lt-lt-lt-lt-HEAD浅拷贝是简单的赋值操作-深拷贝是堆区拷贝" class="headerlink" title="一个拷贝构造函数可以有深拷贝和浅拷贝&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD浅拷贝是简单的赋值操作 深拷贝是堆区拷贝"></a>一个拷贝构造函数可以有深拷贝和浅拷贝<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>浅拷贝是简单的赋值操作 深拷贝是堆区拷贝</h1><p>深拷贝是简单的赋值操作 浅拷贝是堆区拷贝</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>c99e752b3d960c654eafc60d3abf53356aaaad6d</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><p>浅拷贝：简单的赋值拷贝操作<br>深拷贝：在堆区重新申请空间，进行拷贝操作</p><h4 id="1-浅拷贝"><a href="#1-浅拷贝" class="headerlink" title="1. 浅拷贝"></a>1. 浅拷贝</h4><p>如果利用编译器提供的拷贝构造函数，会做浅拷贝操作<br><strong>浅拷贝可能引发的问题：</strong></p><blockquote><p>造成堆区的内存重复释放</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Person有参构造函数的调用</span><br><span class="line">p1的年龄: 10 p1的身高： 140</span><br><span class="line">p2的年龄: 10 p2的身高： 140</span><br><span class="line">Person析构函数的调用</span><br><span class="line">Person析构函数的调用</span><br><span class="line">*** Error <span class="keyword">in</span> `./a.out<span class="string">&#x27;: double free or corruption (fasttop): 0x0000000000ba0030 ***</span></span><br><span class="line"><span class="string">======= Backtrace: =========</span></span><br><span class="line"><span class="string">/lib/x86_64-linux-gnu/libc.so.6(+0x777f5)[0x7fa9e5def7f5]</span></span><br><span class="line"><span class="string">/lib/x86_64-linux-gnu/libc.so.6(+0x8038a)[0x7fa9e5df838a]</span></span><br><span class="line"><span class="string">/lib/x86_64-linux-gnu/libc.so.6(cfree+0x4c)[0x7fa9e5dfc58c]</span></span><br><span class="line"><span class="string">./a.out[0x400cdb]</span></span><br><span class="line"><span class="string">./a.out[0x400b7e]</span></span><br><span class="line"><span class="string">./a.out[0x400bcd]</span></span><br><span class="line"><span class="string">/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf0)[0x7fa9e5d98840]</span></span><br><span class="line"><span class="string">./a.out[0x4009c9]</span></span><br><span class="line"><span class="string">======= Memory map: ========</span></span><br><span class="line"><span class="string">00400000-00402000 r-xp 00000000 08:01 410692                             /home/oufen/Code_Learning/code/c++_code/code/code7-5-深拷贝和浅拷贝/a.out</span></span><br><span class="line"><span class="string">00601000-00602000 r--p 00001000 08:01 410692                             /home/oufen/Code_Learning/code/c++_code/code/code7-5-深拷贝和浅拷贝/a.out</span></span><br><span class="line"><span class="string">00602000-00603000 rw-p 00002000 08:01 410692                             /home/oufen/Code_Learning/code/c++_code/code/code7-5-深拷贝和浅拷贝/a.out</span></span><br><span class="line"><span class="string">00b8e000-00bc0000 rw-p 00000000 00:00 0                                  [heap]</span></span><br><span class="line"><span class="string">7fa9e0000000-7fa9e0021000 rw-p 00000000 00:00 0 </span></span><br><span class="line"><span class="string">7fa9e0021000-7fa9e4000000 ---p 00000000 00:00 0 </span></span><br><span class="line"><span class="string">7fa9e5a6f000-7fa9e5b77000 r-xp 00000000 08:01 398225                     /lib/x86_64-linux-gnu/libm-2.23.so</span></span><br><span class="line"><span class="string">7fa9e5b77000-7fa9e5d76000 ---p 00108000 08:01 398225                     /lib/x86_64-linux-gnu/libm-2.23.so</span></span><br><span class="line"><span class="string">7fa9e5d76000-7fa9e5d77000 r--p 00107000 08:01 398225                     /lib/x86_64-linux-gnu/libm-2.23.so</span></span><br><span class="line"><span class="string">7fa9e5d77000-7fa9e5d78000 rw-p 00108000 08:01 398225                     /lib/x86_64-linux-gnu/libm-2.23.so</span></span><br><span class="line"><span class="string">7fa9e5d78000-7fa9e5f38000 r-xp 00000000 08:01 398230                     /lib/x86_64-linux-gnu/libc-2.23.so</span></span><br><span class="line"><span class="string">7fa9e5f38000-7fa9e6138000 ---p 001c0000 08:01 398230                     /lib/x86_64-linux-gnu/libc-2.23.so</span></span><br><span class="line"><span class="string">7fa9e6138000-7fa9e613c000 r--p 001c0000 08:01 398230                     /lib/x86_64-linux-gnu/libc-2.23.so</span></span><br><span class="line"><span class="string">7fa9e613c000-7fa9e613e000 rw-p 001c4000 08:01 398230                     /lib/x86_64-linux-gnu/libc-2.23.so</span></span><br><span class="line"><span class="string">7fa9e613e000-7fa9e6142000 rw-p 00000000 00:00 0 </span></span><br><span class="line"><span class="string">7fa9e6142000-7fa9e6158000 r-xp 00000000 08:01 397667                     /lib/x86_64-linux-gnu/libgcc_s.so.1</span></span><br><span class="line"><span class="string">7fa9e6158000-7fa9e6357000 ---p 00016000 08:01 397667                     /lib/x86_64-linux-gnu/libgcc_s.so.1</span></span><br><span class="line"><span class="string">7fa9e6357000-7fa9e6358000 rw-p 00015000 08:01 397667                     /lib/x86_64-linux-gnu/libgcc_s.so.1</span></span><br><span class="line"><span class="string">7fa9e6358000-7fa9e64ca000 r-xp 00000000 08:01 144047                     /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21</span></span><br><span class="line"><span class="string">7fa9e64ca000-7fa9e66ca000 ---p 00172000 08:01 144047                     /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21</span></span><br><span class="line"><span class="string">7fa9e66ca000-7fa9e66d4000 r--p 00172000 08:01 144047                     /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21</span></span><br><span class="line"><span class="string">7fa9e66d4000-7fa9e66d6000 rw-p 0017c000 08:01 144047                     /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.21</span></span><br><span class="line"><span class="string">7fa9e66d6000-7fa9e66da000 rw-p 00000000 00:00 0 </span></span><br><span class="line"><span class="string">7fa9e66da000-7fa9e6700000 r-xp 00000000 08:01 398220                     /lib/x86_64-linux-gnu/ld-2.23.so</span></span><br><span class="line"><span class="string">7fa9e68e1000-7fa9e68e7000 rw-p 00000000 00:00 0 </span></span><br><span class="line"><span class="string">7fa9e68fe000-7fa9e68ff000 rw-p 00000000 00:00 0 </span></span><br><span class="line"><span class="string">7fa9e68ff000-7fa9e6900000 r--p 00025000 08:01 398220                     /lib/x86_64-linux-gnu/ld-2.23.so</span></span><br><span class="line"><span class="string">7fa9e6900000-7fa9e6901000 rw-p 00026000 08:01 398220                     /lib/x86_64-linux-gnu/ld-2.23.so</span></span><br><span class="line"><span class="string">7fa9e6901000-7fa9e6902000 rw-p 00000000 00:00 0 </span></span><br><span class="line"><span class="string">7ffcf3f8e000-7ffcf3fb0000 rw-p 00000000 00:00 0                          [stack]</span></span><br><span class="line"><span class="string">7ffcf3ff6000-7ffcf3ff9000 r--p 00000000 00:00 0                          [vvar]</span></span><br><span class="line"><span class="string">7ffcf3ff9000-7ffcf3ffb000 r-xp 00000000 00:00 0                          [vdso]</span></span><br><span class="line"><span class="string">ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]</span></span><br><span class="line"><span class="string">Aborted (core dumped)</span></span><br></pre></td></tr></table></figure><h4 id="2-深拷贝"><a href="#2-深拷贝" class="headerlink" title="2. 深拷贝"></a>2. 深拷贝</h4><p><strong>利用深拷贝来解决上述问题</strong><br>不使用编译器提供的拷贝构造函数<br>自己重写拷贝构造函数</p><blockquote><p>重新在堆区申请一块内存，这块内存存放的数据和拷贝的对象的数据相同</p></blockquote><p>即数据相同，地址不同。<br>指针指向的地址不同，存放的内容相同。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p) <span class="comment">// 拷贝构造</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person拷贝构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">// 如果不利用深拷贝在堆区重新创建内存，会导致浅拷贝带来的重复释放堆区内存的问题</span></span><br><span class="line">        m_age = p.m_age;</span><br><span class="line">        <span class="comment">// m_height = p.m_height; 编译器默认实现</span></span><br><span class="line"></span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">        <span class="comment">// 深拷贝    new int(*p.m_height)   *p.height --&gt;解引用  p.height --&gt;&amp;height</span></span><br><span class="line">=======</span><br><span class="line">        <span class="comment">// 深拷贝    new int(*p.m_height)   *p.height --&gt;解引用  p.height --&gt;*height</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; c99e752b3d960c654eafc60d3abf53356aaaad6d</span><br><span class="line">        m_height = <span class="keyword">new</span> <span class="built_in">int</span>(*p.m_height); <span class="comment">// 重新在堆区申请一块内存</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>() <span class="comment">// 无参构造</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person无参构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a, <span class="type">int</span> height) <span class="comment">// 有参构造</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person有参构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_age = a;</span><br><span class="line">        m_height = <span class="keyword">new</span> <span class="built_in">int</span>(height); <span class="comment">// new int(height) --&gt;int *</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;p) <span class="comment">// 拷贝构造</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person拷贝构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">// 如果不利用深拷贝在堆区重新创建内存，会导致浅拷贝带来的重复释放堆区内存的问题</span></span><br><span class="line">        m_age = p.m_age;</span><br><span class="line">        <span class="comment">// m_height = p.m_height; 编译器默认实现</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 深拷贝    new int(*p.m_height)   *p.height --&gt;解引用  p.height --&gt;&amp;height</span></span><br><span class="line">        m_height = <span class="keyword">new</span> <span class="built_in">int</span>(*p.m_height); <span class="comment">// 重新在堆区申请一块内存</span></span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123; <span class="comment">// 析构函数的调用 通常将堆区开辟的数据做释放操作</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person析构函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (m_height != <span class="literal">NULL</span>) <span class="comment">// new可能在堆区开辟内存不成功 不成功将会返回NULL</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> m_height;</span><br><span class="line">            m_height = <span class="literal">NULL</span>; <span class="comment">// 防止野指针</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">    <span class="type">int</span> *m_height; <span class="comment">// 将身高的数据开辟到堆区</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">140</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>; <span class="comment">// p2先被释放  stcak 先进后出  先构造的后析构</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1的年龄: &quot;</span> &lt;&lt; p1.m_age &lt;&lt; <span class="string">&quot; p1的身高： &quot;</span> &lt;&lt; *p1.m_height &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2的年龄: &quot;</span> &lt;&lt; p2.m_age &lt;&lt; <span class="string">&quot; p2的身高： &quot;</span> &lt;&lt; *p2.m_height &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;---------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p>如果类中<strong>在堆区开辟了一块内存空间</strong>，就要使用<strong>析构函数释放堆区的数据</strong></p></blockquote><blockquote><p>如果<strong>有属性在堆区内开辟的</strong>，一定要<strong>自己提供拷贝构造函数</strong>，防止深拷贝带来的问题<br>如果<strong>有属性在堆区内开辟的</strong>，一定要<strong>自己提供拷贝构造函数</strong>，防止浅拷贝带来的问题</p></blockquote><h3 id="code7-6-初始化列表"><a href="#code7-6-初始化列表" class="headerlink" title="code7-6-初始化列表"></a>code7-6-初始化列表</h3><p>作用：</p><blockquote><p>c++提供了初始化列表的语法，用来初始化属性</p></blockquote><p>语法:</p><blockquote><p>构造函数():属性1(值1)，属性2(值2)….{}</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*Person(int a, int b, int c)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        m_a = a;</span></span><br><span class="line"><span class="comment">        m_b = b;</span></span><br><span class="line"><span class="comment">        m_c = c;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">// 初始化列表方式初始化</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c) : <span class="built_in">m_a</span>(a), <span class="built_in">m_b</span>(b), <span class="built_in">m_c</span>(c)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; m_a &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; m_b &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; m_c &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_a;</span><br><span class="line">    <span class="type">int</span> m_b;</span><br><span class="line">    <span class="type">int</span> m_c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Person p();   自己提供了有参构造 编译器就不再提供无参构造了</span></span><br><span class="line">    <span class="function">Person <span class="title">p</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">    p.<span class="built_in">printPerson</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="code7-7-类对象作为类成员"><a href="#code7-7-类对象作为类成员" class="headerlink" title="code7-7-类对象作为类成员"></a>code7-7-类对象作为类成员</h3><p>c++类中的成员可以是另一个类的对象，我们称该对象为对象n成员</p><p>比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line">    A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B类中对象a作为成员，A为对象成员<br>当B创建对象时，A和B的构造和析构的顺序是如何的？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Phone</span>(string name) : <span class="built_in">phone_Name</span>(name)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Phone构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Phone</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Phone的析构函数！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string phone_Name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(string name, string phone) : <span class="built_in">m_Name</span>(name), <span class="built_in">m_Phone</span>(phone)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的构造函数！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Person的析构函数！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">playGame</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; m_Name &lt;&lt; <span class="string">&quot; 使用&quot;</span> &lt;&lt; m_Phone.phone_Name &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string m_Name;</span><br><span class="line">    Phone m_Phone;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 当类中成员是其他类的成员时，我们称该成员为对象成员</span></span><br><span class="line">    <span class="comment">// 构造的顺序是：先调用对象成员的构造，再调用本类构造</span></span><br><span class="line">    <span class="comment">// 构造顺序和析构相反</span></span><br><span class="line">    <span class="function">Person <span class="title">p</span><span class="params">(<span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;apple&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Phone构造函数!</span></span><br><span class="line"><span class="comment">    Person的构造函数！</span></span><br><span class="line"><span class="comment">    Person的析构函数！</span></span><br><span class="line"><span class="comment">    Phone的析构函数！</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="code7-8-静态成员"><a href="#code7-8-静态成员" class="headerlink" title="code7-8-静态成员"></a>code7-8-静态成员</h3><p>静态成员就是<strong>在成员变量和成员函数前加上关键字</strong><code>static</code>,称为静态成员</p><p>静态成员分为：</p><ul><li>静态成员变量<ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul></li><li>静态成员函数<ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul></li></ul><h4 id="1-静态成员变量"><a href="#1-静态成员变量" class="headerlink" title="1. 静态成员变量"></a>1. 静态成员变量</h4><p>类中static修饰的成员变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_a; <span class="comment">// 静态成员变量 类内声明</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    特点</span></span><br><span class="line"><span class="comment">    1. 在编译阶段分配内存</span></span><br><span class="line"><span class="comment">    2. 类内声明，类外初始化</span></span><br><span class="line"><span class="comment">    3. 所有对象共享同一份数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_b; <span class="comment">// 静态成员变量也是有访问权限的</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类外初始化</span></span><br><span class="line"><span class="type">int</span> Person::m_a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// int Person::m_b = 10;   私有权限无法访问</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 静态成员变量的两种访问方式</span></span><br><span class="line">    <span class="comment">// 1.通过对象</span></span><br><span class="line">    Person p1;</span><br><span class="line">    p1.m_a = <span class="number">100</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1.m_a = &quot;</span> &lt;&lt; p1.m_a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Person p2;</span><br><span class="line">    p2.m_a = <span class="number">200</span>; <span class="comment">// static 修饰的变量 静态成员</span></span><br><span class="line">    <span class="comment">// 所有对象共享同一份数据</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1.m_a = &quot;</span> &lt;&lt; p1.m_a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2.m_a = &quot;</span> &lt;&lt; p2.m_a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 通过类名访问</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;m_a = &quot;</span> &lt;&lt; Person::m_a &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;m_b = &quot; &lt;&lt; Person::m_b &lt;&lt; endl;  私有权限无法访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;helloworld!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-静态成员函数"><a href="#2-静态成员函数" class="headerlink" title="2. 静态成员函数"></a>2. 静态成员函数</h4><p>在类中用static修饰的成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _TEST_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TEST_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 静态函数的特点</span></span><br><span class="line">    <span class="comment">// 1. 所有对象共享同一个函数</span></span><br><span class="line">    <span class="comment">// 2. 静态成员函数只能访问成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;静态函数func调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        m_c = <span class="number">100</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;m_c = &quot;</span> &lt;&lt; m_c &lt;&lt; endl;</span><br><span class="line">        <span class="comment">// 静态函数不能访问非静态成员变量</span></span><br><span class="line">        <span class="comment">//  m_d = 100;  非静态成员引用必须与特定对象相对</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_c;</span><br><span class="line">    <span class="type">int</span> m_d;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 静态成员函数也是有访问权限</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;func2调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test:</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/test.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> People::m_c = <span class="number">10</span>; <span class="comment">// 静态成员类外初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 静态函数的访问方式</span></span><br><span class="line">    <span class="comment">// 1. 对象</span></span><br><span class="line">    People p1;</span><br><span class="line">    p1.<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 类名</span></span><br><span class="line">    People::<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// People::func2(); 私有权限无法访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="code8-c-对象模型和this指针"><a href="#code8-c-对象模型和this指针" class="headerlink" title="code8 c++对象模型和this指针"></a>code8 c++对象模型和this指针</h2><h3 id="code8-1-成员变量和成员函数分开存储"><a href="#code8-1-成员变量和成员函数分开存储" class="headerlink" title="code8-1-成员变量和成员函数分开存储"></a>code8-1-成员变量和成员函数分开存储</h3><p>在c++中，类内的成员变量和成员函数分开存储</p><blockquote><p>只有<strong>非静态成员变量</strong>才属于类的对象上<br>其他都不属于类的对象上</p></blockquote><p>静态成员变量和静态成员函数大家都共享同一份数据，所以不属于类的对象上</p><p>非静态成员函数,</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_a;        <span class="comment">// 非静态成员变量 属于类的对象上的</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_b; <span class="comment">// 静态成员变量  不属于类的对象上</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> <span class="comment">// 函数也不占内存空间  不属于类的对象上 所有函数共享一个函数实例</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Person::m_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p;</span><br><span class="line">    <span class="comment">// 空对象 sizeof of p = 1</span></span><br><span class="line">    <span class="comment">// c++编译器会给每个空对象分配一个字节的空间  是为了区分空对象占内存的位置</span></span><br><span class="line">    <span class="comment">// 每个空对象也应该有一个独一无二的内存地址</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof of p = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p;</span><br><span class="line">    <span class="comment">// sizeof of p = 4</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof of p = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// test1();</span></span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="code8-2-this指针的概念"><a href="#code8-2-this指针的概念" class="headerlink" title="code8-2-this指针的概念"></a>code8-2-this指针的概念</h3><p>作为一个非静态成员变量函数只会产生一个函数实例，也就是说多个同类型的对象会共用一块代码</p><p>这一块代码是如何区分那个对象调用自己的呢？</p><p>c++提供提供特定的对象指针，this指针，解决上述问题。</p><p>this指针指向被调用的成员函数所属的对象，p1调用这个成员函数了，this就指向p1</p><ul><li>this指针<strong>指向被调用的成员函数所属的对象</strong>。</li><li>this指针是<strong>隐含每一个非静态成员函数内</strong>的一种指针</li><li>this指针<strong>不需要定义，直接使用即可</strong></li><li>this指针的用途：<ul><li>当<strong>形参和成员变量同名时</strong>，可以<strong>使用this指针来区分</strong></li><li>在类的非静态成员函数中返回对象本身，可以使用return *this</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// this指针指向被调用成员函数所属的对象</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Person &amp;<span class="title">PersonAddAge</span><span class="params">(Person &amp;p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line">        <span class="comment">// this指向p2的指针  *this指向的就是p2</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// 如果要返回本体，要使用Person&amp;的方式返回  返回的就是p2</span></span><br><span class="line">        <span class="comment">// 引用指向本身内存 不使用引用就是拷贝构造操作了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不加引用 *this(p2)就会销毁 返回的是别的Person对象</span></span><br><span class="line">        <span class="comment">// 后续的操作和p2无关</span></span><br><span class="line">        <span class="comment">// 不加引用就相当与传值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Person p = Person(*this); = Person(p2)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 解决名称冲突</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;age = &quot;</span> &lt;&lt; p.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 返回对象本身使用*this</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链式编程</span></span><br><span class="line">    p2.<span class="built_in">PersonAddAge</span>(p1).<span class="built_in">PersonAddAge</span>(p1); <span class="comment">// 将p1的age加到自身的身上</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// test1();</span></span><br><span class="line">    <span class="built_in">test2</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="code8-3-空指针访问成员函数"><a href="#code8-3-空指针访问成员函数" class="headerlink" title="code8-3-空指针访问成员函数"></a>code8-3-空指针访问成员函数</h3><p>c++中空指针也是可以访问成员函数的，但是要注意有没有用到this指针</p><p>如果用到了this指针，需要加以判断以保证代码的健壮性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showClassName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;我是Person类！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showPersonAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 报错的原因是传入的指针为NULL</span></span><br><span class="line">        <span class="comment">// 如果访问数据  将会报错  空指针无法访问数据 并没有指向任何数据</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">NULL</span>) <span class="comment">// 解决方法，加入空指针的判断</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;age = &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person *p = <span class="literal">NULL</span>; <span class="comment">// 空指针</span></span><br><span class="line"></span><br><span class="line">    p-&gt;<span class="built_in">showClassName</span>();</span><br><span class="line">    p-&gt;<span class="built_in">showPersonAge</span>(); <span class="comment">// Segmentation fault (core dumped)</span></span><br><span class="line">    <span class="comment">// 调用了类的成员变量 而指针p又为空，所以无法访问数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="code8-4-const修饰成员函数"><a href="#code8-4-const修饰成员函数" class="headerlink" title="code8-4-const修饰成员函数"></a>code8-4-const修饰成员函数</h3><p><code>常函数</code>：</p><ul><li>成员函数加const后我们称这个函数为常函数</li><li><strong>常函数不可以修改成员属性</strong></li><li><strong>成员属性声明加关键字mutable后，在常函数中依然可以修改</strong></li></ul><p><code>常对象</code></p><ul><li>声明对象前加const称该对象为常对象</li><li><strong>常对象只能调用常函数</strong></li></ul><p><code>注意</code>：<br><strong>this指针</strong>的本质是一个指针常量</p><blockquote><p>Person *const this;</p></blockquote><p>指向不可修改，指向的值可以修改</p><p>而<strong>在成员函数后添加const</strong><br>this指针就相当与</p><blockquote><p>const Person *const this;</p></blockquote><p>指向的值也不可修改<br>如果想修改的话，需要添加mutablei关键字修饰成员变量</p><p><code>关键字mutable</code></p><p>在类中使用mutable修饰的变量<br>在<strong>常对象和常函数</strong>中都可以修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>() &#123;&#125;             <span class="comment">// 默认构造</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span> <span class="type">const</span> <span class="comment">// 常函数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// this-&gt;m_a = 100;  表达式必须是可修改的左值</span></span><br><span class="line">        <span class="comment">// 成员函数后加了const后就不可以修改成员属性</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// this指针的本质 指针常量 指针的指向不可以改变</span></span><br><span class="line">        <span class="comment">// this = NULL; 指向不可改变</span></span><br><span class="line">        <span class="comment">//  Person  *const this 本质是指针常量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 而在成员函数后加了const后就相当于</span></span><br><span class="line">        <span class="comment">// const Person *const this</span></span><br><span class="line">        <span class="comment">// 指针指向的值和指向都不可修改</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在成员函数后加const，修饰的是this指针</span></span><br><span class="line">        <span class="comment">// this指向的值也不可以修改</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加了mutable关键字后</span></span><br><span class="line">        <span class="comment">// 在常函数中也可以访问该变量</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_b = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_a;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> m_b; <span class="comment">// 添加了关键字mutable 特殊变量 即使在常函数中也可以修改这个变量</span></span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p;</span><br><span class="line">    p.<span class="built_in">showPerson</span>();</span><br><span class="line"></span><br><span class="line">    p.<span class="built_in">func</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> Person p; <span class="comment">// 声明对象前加const称该对象为常对象</span></span><br><span class="line">    <span class="comment">// p.m_a = 10;  常对象不能修改成员变量的值，但是可以访问</span></span><br><span class="line">    cout &lt;&lt; p.m_a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    p.m_b = <span class="number">10</span>; <span class="comment">// mutable在常对象中也可以修改</span></span><br><span class="line"></span><br><span class="line">    p.m_c = <span class="number">100</span>; <span class="comment">// 常对象也可以访问修改静态成员变量的值  静态成员变量类内声明 类外初始化 所有对象共享同一份数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// p.func();  常对象不可以调用普通函数  因为普通函数可以修改成员属性</span></span><br><span class="line">    p.<span class="built_in">showPerson</span>(); <span class="comment">// 常对象只能调用常函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="code9-友元"><a href="#code9-友元" class="headerlink" title="code9 友元"></a>code9 友元</h2><p>生活中家里有客厅（Public） 有卧室(private)</p><p>客厅所有的客人都可以进去，但是卧室是私有的，也就是说只有自己可以进去，但是也可以允许其他人进去（家人）</p><p>在程序里，有些<strong>私有属性</strong>，也<strong>想让类外特殊的一些函数或者类进行访问</strong>，就需要使用到<strong>友元</strong></p><p>声明一些特殊的函数或者类，来作为另一个类的好朋友，访问到这个类中的私有成员</p><ol><li><p><code>友元的目的</code></p><blockquote><p>就是<code>让一个函数</code>或者<code>类</code>访问<strong>另一个类中私有的成员</strong></p></blockquote></li><li><p><code>友元的关键字</code></p><blockquote><p>friend</p></blockquote></li><li><p><code>友元的三种实现</code></p></li></ol><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h3 id="code9-1-全局函数做友元"><a href="#code9-1-全局函数做友元" class="headerlink" title="code9-1-全局函数做友元"></a>code9-1-全局函数做友元</h3><p>在类中声明全局函数，并且加以friend关键字修饰</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 房子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// goodFriend 全局函数是Building的好朋友 可以访问Building内的私有成员</span></span><br><span class="line">    <span class="comment">// 即全局函数做友元</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">goodFriend</span><span class="params">(Building &amp;building)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Building</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        sittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">        bedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string sittingRoom; <span class="comment">// 客厅</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string bedRoom; <span class="comment">// 卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">goodFriend</span><span class="params">(Building &amp;building)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;goodfriend 正在访问 &quot;</span> &lt;&lt; building.sittingRoom &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;goodfriend 正在访问 &quot; &lt;&lt; building.bedRoom &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// 私有属性类外不可访问</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 但是在类中做声明 并且加friend关键字修饰后就可以访问私有成员了</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;goodfriend 正在访问 &quot;</span> &lt;&lt; building.bedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Building building;</span><br><span class="line">    <span class="built_in">goodFriend</span>(building);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="code9-2-类做友元"><a href="#code9-2-类做友元" class="headerlink" title="code9-2-类做友元"></a>code9-2-类做友元</h3><p>在类中声明，并且加关键字friend修饰 即可访问本类中的私有成员</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 房子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// GoodFriend 类是Building类的好朋友 可以访问Building内的私有成员</span></span><br><span class="line">    <span class="comment">// 即类做友元</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">GoodFriend</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Building</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string sittingRoom; <span class="comment">// 客厅</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string bedRoom; <span class="comment">// 卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building ::<span class="built_in">Building</span>() <span class="comment">// Building的构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    sittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">    bedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好朋友类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodFriend</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">GoodFriend</span>();</span><br><span class="line">    ~<span class="built_in">GoodFriend</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>; <span class="comment">// 参观 访问Building中的属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">GoodFriend::<span class="built_in">GoodFriend</span>() <span class="comment">// 构造函数的实现</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建了对象</span></span><br><span class="line">    building = <span class="keyword">new</span> Building; <span class="comment">// 构造函数的隐式转换法</span></span><br><span class="line">    <span class="comment">// 相当于 调用构造函数 赋初值</span></span><br><span class="line">&#125;</span><br><span class="line">GoodFriend::~<span class="built_in">GoodFriend</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (building != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> building;</span><br><span class="line">        building = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GoodFriend::visit</span><span class="params">()</span> <span class="comment">// 参观函数的实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;GoodFriend 正在访问 &quot;</span> &lt;&lt; building-&gt;sittingRoom &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;GoodFriendi正在访问 &quot; &lt;&lt; building-&gt;bedRoom &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// 类外不可访问 私有属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在访问的类中声明类 并加上friend关键字即可访问私有成员</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;GoodFriend 正在访问 &quot;</span> &lt;&lt; building-&gt;bedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Building building;</span><br><span class="line">    GoodFriend goodfriend;</span><br><span class="line">    goodfriend.<span class="built_in">visit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="code9-3-成员函数做友元"><a href="#code9-3-成员函数做友元" class="headerlink" title="code9-3-成员函数做友元"></a>code9-3-成员函数做友元</h3><p>成员函数做友元有易错点</p><p>要注意类的编写顺序</p><p>养成一个习惯：</p><blockquote><blockquote><p>类内写声明   类外实现成员函数<br>&#x2F;&#x2F; 注意成员函数做友元时可能发生的错误</p></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../inc/myproject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  成员函数的注意点</span></span><br><span class="line"><span class="comment">//  这一节的编写类的顺序要注意一下</span></span><br><span class="line"><span class="comment">//  Building类要在GoodFriend类后定义</span></span><br><span class="line"><span class="comment">//  程序是一步一步执行的，在Building类中声明了friend 友元函数</span></span><br><span class="line"><span class="comment">//  如果GoodFriend不在Building类前定义，则会出现找不到GoodFriend类的错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    g++       -c src/main.cpp -o obj/main.o -Wall -g -Wextra -pedantic -std=c++11 -I ./inc</span></span><br><span class="line"><span class="comment">src/main.cpp:6:36: error: invalid use of incomplete type ‘class GoodFriend’</span></span><br><span class="line"><span class="comment">     friend void GoodFriend::visit2();</span></span><br><span class="line"><span class="comment">                                    ^</span></span><br><span class="line"><span class="comment">src/main.cpp:2:7: note: forward declaration of ‘class GoodFriend’</span></span><br><span class="line"><span class="comment"> class GoodFriend;</span></span><br><span class="line"><span class="comment">       ^</span></span><br><span class="line"><span class="comment">src/main.cpp:7:35: error: invalid use of incomplete type ‘class GoodFriend’</span></span><br><span class="line"><span class="comment">     friend void GoodFriend::visit();</span></span><br><span class="line"><span class="comment">                                   ^</span></span><br><span class="line"><span class="comment">src/main.cpp:2:7: note: forward declaration of ‘class GoodFriend’</span></span><br><span class="line"><span class="comment"> class GoodFriend;</span></span><br><span class="line"><span class="comment">       ^</span></span><br><span class="line"><span class="comment">src/main.cpp: In member function ‘void GoodFriend::visit2()’:</span></span><br><span class="line"><span class="comment">src/main.cpp:15:12: error: ‘std::__cxx11::string Building::bedRoom’ is private</span></span><br><span class="line"><span class="comment">     string bedRoom; // 卧室</span></span><br><span class="line"><span class="comment">            ^</span></span><br><span class="line"><span class="comment">src/main.cpp:47:60: error: within this context</span></span><br><span class="line"><span class="comment">     cout &lt;&lt; &quot;GoodFriend visit2 正在访问 &quot; &lt;&lt; building-&gt;bedRoom &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">                                                            ^</span></span><br><span class="line"><span class="comment">src/main.cpp: In member function ‘void GoodFriend::visit()’:</span></span><br><span class="line"><span class="comment">src/main.cpp:15:12: error: ‘std::__cxx11::string Building::bedRoom’ is private</span></span><br><span class="line"><span class="comment">     string bedRoom; // 卧室</span></span><br><span class="line"><span class="comment">            ^</span></span><br><span class="line"><span class="comment">src/main.cpp:55:60: error: within this context</span></span><br><span class="line"><span class="comment">     cout &lt;&lt; &quot;GoodFriend visit2 正在访问 &quot; &lt;&lt; building-&gt;bedRoom &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">                                                            ^</span></span><br><span class="line"><span class="comment">Makefile:20: recipe for target &#x27;obj/main.o&#x27; failed</span></span><br><span class="line"><span class="comment">make: *** [obj/main.o] Error 1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以以后这样写在class类内写声明 类外初始化函数</span></span><br><span class="line"><span class="comment">// 而且做友元的函数要先定义，并且后定义的类要声明在做友元类之前</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span>;</span><br><span class="line"><span class="comment">//  好朋友类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoodFriend</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">GoodFriend</span>();</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;  <span class="comment">// 访问Building内中的私有属性</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">visit2</span><span class="params">()</span></span>; <span class="comment">// 让visit2不可以访问Building内中的私有成员</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 房子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 告诉编译器 GoodFriend是Building类的好朋友  可以访问私有成员</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">GoodFriend::visit2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Building</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string sittingRoom; <span class="comment">// 客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string bedRoom; <span class="comment">// 卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类内函数类外实现</span></span><br><span class="line">Building ::<span class="built_in">Building</span>() <span class="comment">// Building的构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    sittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">    bedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GoodFriend::<span class="built_in">GoodFriend</span>() <span class="comment">// 构造函数的实现</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建了对象</span></span><br><span class="line">    building = <span class="keyword">new</span> Building; <span class="comment">// 构造函数的隐式转换法</span></span><br><span class="line">    <span class="comment">// 相当于 调用构造函数 赋初值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GoodFriend::visit2</span><span class="params">()</span> <span class="comment">// 访问私有属性</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;GoodFriend  visit2 正在访问 &quot;</span> &lt;&lt; building-&gt;sittingRoom &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;GoodFriendi正在访问 &quot; &lt;&lt; building-&gt;bedRoom &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// 类外不可访问 私有属性</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;GoodFriend visit2 正在访问 &quot;</span> &lt;&lt; building-&gt;bedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GoodFriend::visit</span><span class="params">()</span> <span class="comment">// 不可访问私有属性</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;GoodFriend visit 正在访问 &quot;</span> &lt;&lt; building-&gt;sittingRoom &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;GoodFriendi正在访问 &quot; &lt;&lt; building-&gt;bedRoom &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">// 类外不可访问 私有属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;GoodFriend visit2 正在访问 &quot; &lt;&lt; building-&gt;bedRoom &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GoodFriend goodfriend;</span><br><span class="line">    goodfriend.<span class="built_in">visit2</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    goodfriend.<span class="built_in">visit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test1</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p><h2 id="code10-运算符重载"><a href="#code10-运算符重载" class="headerlink" title="code10 运算符重载"></a>code10 运算符重载</h2><p>运算符重载：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><h3 id="code10-1-加号运算符重载"><a href="#code10-1-加号运算符重载" class="headerlink" title="code10-1 加号运算符重载"></a>code10-1 加号运算符重载</h3><p>作用：实现两个自定义数据类型相加的运算</p><ol><li>通过成员函数重载</li></ol><p>这里有个疑问：返回对象的时候，返回对象本身还是返回一个新的对象？</p><blockquote><p>这里主要注意的就是this指针    返回的对象是否是本身<br>注意   &amp;运算符</p></blockquote><p>值传递和引用传递   这两种要分明白   拷贝操作的注意<br>指针和引用传递    这两种也要分明白  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Person <span class="title">Person::PersonaddPerson</span><span class="params">(Person &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person temp;</span><br><span class="line">    temp.m_a = <span class="keyword">this</span>-&gt;m_a + p.m_a;</span><br><span class="line">    temp.m_b = <span class="keyword">this</span>-&gt;m_b + p.m_b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// this 指针 调用成员函数 this指针就指向ta</span></span><br><span class="line">    <span class="comment">// 所以这是实现两个对象相加后属性返回对象的方式1</span></span><br><span class="line">    Person p3 = p1.<span class="built_in">PersonaddPerson</span>(p2);</span><br></pre></td></tr></table></figure><ol start="2"><li>通过成员函数重载operator+  即重载+号</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Person Person::<span class="keyword">operator</span>+(Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">    Person temp;</span><br><span class="line">    temp.m_a = <span class="keyword">this</span>-&gt;m_a + p.m_a;</span><br><span class="line">    temp.m_b = <span class="keyword">this</span>-&gt;m_b + p.m_b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line">    <span class="comment">// 通过成员函数重载+号运算符</span></span><br><span class="line">    <span class="comment">// Person p4 = p1.operator+(p2);</span></span><br><span class="line">    Person p4 = p1 + p2;  </span><br><span class="line">    p4.<span class="built_in">show</span>();</span><br></pre></td></tr></table></figure><ol start="3"><li>全局函数重载<br>使用全局函数重载<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Person <span class="keyword">operator</span>+(Person &amp;p1, Person &amp;p2)</span><br><span class="line">&#123;</span><br><span class="line">    Person temp;</span><br><span class="line">    temp.m_a = p1.m_a + p2.m_a;</span><br><span class="line">    temp.m_b = p2.m_b + p2.m_b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test</span></span><br><span class="line">     <span class="comment">// 通过全局函数重载</span></span><br><span class="line">    Person p5 = <span class="keyword">operator</span>+(p1, p2);</span><br><span class="line">    <span class="comment">// 但是如果这样写的话  回报错  原因是什么呢？</span></span><br><span class="line">    <span class="comment">// 因为我在成员函数里也重载了operator+函数</span></span><br><span class="line">    <span class="comment">// 造成了重复声明  所以报错</span></span><br><span class="line">    <span class="comment">// Person p5 = p1 + p2;</span></span><br><span class="line">    p5.<span class="built_in">show</span>();</span><br></pre></td></tr></table></figure></li></ol><p>运算符重载也可以发生函数重载，operator+就是函数名</p><p>比如 Person + int</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person <span class="keyword">operator</span>+(Person &amp;p, <span class="type">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">    Person temp;</span><br><span class="line">    temp.m_a = p.m_a + num;</span><br><span class="line">    temp.m_b = p.m_b + num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要在类内定义的话，只能定义<strong>单参数</strong>的运算符函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类内定义的话  函数内只能重载一个参数</span></span><br><span class="line">   <span class="comment">/*Person operator+(Person &amp;p1, Person &amp;p2)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br></pre></td></tr></table></figure><p>总结：</p><blockquote><ol><li>对于内置的数据类型的表达式的运算符是不可能改变的<br>自定义数据类型可以改变<br>1+1&#x3D;2  <strong>！&#x3D;</strong> 1+1&#x3D;0</li><li>不要滥用运算符重载<br>比如两个数相加，在函数实现里实现的是相减</li></ol></blockquote><h3 id="code10-2-左移运算符重载"><a href="#code10-2-左移运算符重载" class="headerlink" title="code10-2-左移运算符重载"></a>code10-2-左移运算符重载</h3><p>可以输出自定义数据类型</p><ol><li>使用成员函数重载</li></ol><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>c99e752b3d960c654eafc60d3abf53356aaaad6d</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/08/hello-world/"/>
      <url>/2023/04/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Hello-Cyaya6"><a href="#Hello-Cyaya6" class="headerlink" title="Hello Cyaya6"></a>Hello Cyaya6</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
